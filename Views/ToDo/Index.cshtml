@model List<ToDoItem>
@{
    ViewData["Title"] = "To-Do List";
}

<div class="container mt-4">
    <h2 class="text-center text-primary">@ViewData["Title"]</h2>

    <div class="card p-4 shadow-sm">
        <form asp-action="Create" method="post" class="d-flex gap-2">
            <input type="text" name="title" class="form-control" placeholder="Enter a new task" required />
            <select name="priority" class="form-select" required>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
            </select>
            <input type="datetime-local" name="dueTime" class="form-control" required />
            <button type="submit" class="btn btn-primary">Add Task</button>
        </form>
    </div>

    @if (Model != null && Model.Count > 0)
    {
        <table class="table table-bordered table-striped mt-4">
            <thead class="table-dark">
                <tr>
                    <th>Task</th>
                    <th>Priority</th>
                    <th>Due Time</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="@(item.IsCompleted ? "table-success" : "")">
                        <td class="@(item.IsCompleted ? "text-decoration-line-through" : "")">@item.Title</td>
                        <td>
                            <span class="badge bg-@(item.Priority == "High" ? "danger" : item.Priority == "Medium" ? "warning" : "success")">
                                @item.Priority
                            </span>
                        </td>
                        <td>@item.DueTime.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@(item.IsCompleted ? "Completed" : "Pending")</td>
                        <td>
                            <div class="d-flex gap-2">
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-info btn-sm">Edit</a>
                                <form asp-action="ToggleComplete" method="post">
                                    <input type="hidden" name="id" value="@item.Id" />
                                    <button type="submit" class="btn btn-warning btn-sm">
                                        @(item.IsCompleted ? "Undo" : "Complete")
                                    </button>
                                </form>
                                <form asp-action="Delete" method="post">
                                    <input type="hidden" name="id" value="@item.Id" />
                                    <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                                </form>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-muted mt-4 text-center">No tasks available. Start by adding a new task!</p>
    }
</div>

<script>
    function checkDueTimes() {
        const now = new Date();
        document.querySelectorAll("tbody tr").forEach(row => {
            const dueTimeText = row.children[2].innerText;
            const dueTime = new Date(dueTimeText);
            if (dueTime <= now && row.classList.contains("table-success") === false) {
                alert("Task " + row.children[0].innerText + " is overdue!");
            }
        });
    }
    setInterval(checkDueTimes, 60000); // Check every minute
</script>
